import type { Project } from "./types";
export const projects: Project[] = [
	{
		id: 1,
		name: "Calculadora",
		description: "Calculadora con operaciones básicas y científicas y función de memoria.",
		tags: [
			"math",
			"calculator",
			"memory",
			"UI/UX",
			"DOM Manipulation",
			"event handling",
			"logic",
			"frontend",
		],
		category: "utility",
		difficulty: "intermediate",
		date: "2023-03-30",
		featured: true,
		image:
			"https://raw.githubusercontent.com/AletzMan/ImagesStorage/refs/heads/main/vanillacollection/calculator.webp",
		language: "javascript",
		urlRepo: "https://github.com/AletzMan/calculator",
		urlDemo: "https://aletzman.github.io/calculator/",
		projectDetails: {
			// Toda la información detallada de la calculadora
			description:
				"Una **calculadora completa y funcional** construida exclusivamente con **JavaScript (Vanilla JS)**, sin el uso de frameworks o librerías externas. Este proyecto demuestra la capacidad de JavaScript para manejar interacciones de usuario complejas y lógica de negocio para operaciones aritméticas.",
			keyFeatures: [
				"**Operaciones Aritméticas Básicas:** Realiza sumas, restas, multiplicaciones y divisiones.",
				"**Operaciones Avanzadas:** Incluye funciones para porcentaje (%), recíproco (1/x), cuadrado ($x^2$), y raíz cuadrada ($sqrt{x}$).",
				"**Gestión de Signos:** Permite cambiar el signo de un número ($+/-$).",
				"**Manejo de Entrada:** Admite números con decimales y gestiona la entrada de dígitos de manera intuitiva.",
				"**Historial de Memoria:** Implementa una funcionalidad de memoria (M+, M-, MR, MC) con una lista visible de valores guardados, permitiendo al usuario almacenar y recuperar números.",
				"**Feedback Visual:** Muestra la operación actual y el resultado en pantallas separadas, mejorando la experiencia del usuario. El tamaño de la fuente del resultado se ajusta dinámicamente según la longitud para asegurar la visibilidad.",
				"**Controles de Borrado:** Ofrece opciones para borrar la última entrada (Backspace), borrar la entrada actual (C) o borrar todo (CE).",
			],
			codeHighlights: [
				"**Manipulación del DOM:** Se utiliza `document.querySelectorAll` y `document.querySelector` para acceder a los elementos HTML de la calculadora, y se manipulan sus propiedades `textContent` y `style` para actualizar la interfaz.",
				'**Manejo de Eventos:** Se emplean `addEventListener("mousedown", ...)` para detectar las interacciones del usuario con los botones, lo que permite ejecutar las funciones correspondientes a cada acción.',
				"**Lógica de Operaciones:** Las funciones `SelectNumberPress`, `SelectOperation` y `ValidateOperation` manejan la lógica principal de la calculadora, gestionando el estado de los números, operadores y resultados intermedios.",
				"**Gestión de Estado:** Variables como `numberOne`, `numberTwo`, `matchSign`, `waitSecondNumber`, `resultObtained`, `operationRealized`, y `newNumberEntered` son cruciales para controlar el flujo de las operaciones y el comportamiento de la calculadora.",
				"**Funcionalidad de Memoria:** La implementación de la memoria es un punto fuerte, con funciones para añadir, restar, recuperar y limpiar valores, y una interfaz dinámica para ver los elementos guardados.",
			],
			futureImprovements: [
				"**Historial de Operaciones:** Podrías añadir un registro visual de las operaciones completadas, similar a cómo algunas calculadoras muestran las últimas ecuaciones.",
				"**Manejo de Errores:** Implementar manejo para divisiones por cero o entradas inválidas, mostrando mensajes de error amigables en el `displayResult`.",
				"**Teclado Numérico:** Permitir la interacción con la calculadora a través del teclado físico del usuario para los números y operadores.",
				"**Más Funciones Científicas:** Si te interesa, podrías expandirla para incluir funciones trigonométricas, logaritmos, etc.",
				"**Diseño Responsivo:** Asegurarse de que la calculadora se vea y funcione bien en diferentes tamaños de pantalla (aunque esto sería más de CSS, complementaría el proyecto).",
				"**Accesibilidad:** Mejorar la accesibilidad para usuarios con discapacidades, por ejemplo, añadiendo atributos ARIA.",
			],
		},
	},
	{
		id: 2,
		name: "PaintBoard",
		description: "Lienzo interactivo tipo Paint para dibujar libremente figuras geométricas.",
		tags: [
			"canvas",
			"drawing",
			"events",
			"paint",
			"UI/UX",
			"DOM Manipulation",
			"graphics",
			"frontend",
		],
		category: "utility",
		difficulty: "easy",
		date: "2023-01-14",
		featured: true,
		image:
			"https://raw.githubusercontent.com/AletzMan/ImagesStorage/refs/heads/main/vanillacollection/paint-board.webp",
		language: "javascript",
		urlRepo: "https://github.com/AletzMan/PaintBoard",
		urlDemo: "https://aletzman.github.io/PaintBoard/",
		projectDetails: {
			description:
				"Un **lienzo interactivo** que simula una aplicación de dibujo tipo Paint, permitiendo a los usuarios crear formas y trazos libres. Desarrollado con **JavaScript vanilla** y el API de Canvas 2D, este proyecto destaca la manipulación directa de gráficos y la gestión de eventos de mouse para una experiencia de dibujo fluida.",
			keyFeatures: [
				"**Herramientas de Dibujo Variadas:** Incluye lápiz (trazado libre), cuadrado, círculo, elipse, triángulo, rectángulo redondeado y líneas, así como una herramienta de borrador.",
				"**Control de Color:** Permite seleccionar colores de línea y de relleno a través de una paleta predefinida o un selector de color (color picker).",
				"**Opciones de Borde y Relleno:** Posibilidad de desactivar el borde o el relleno de las formas, ofreciendo mayor flexibilidad creativa.",
				"**Ajuste de Grosor:** Control de grosor para las líneas de dibujo y el tamaño del borrador.",
				"**Guías Visuales:** Muestra reglas interactivas en los ejes X e Y, junto con un sistema de coordenadas y un cursor que sigue el puntero, ayudando a la precisión del dibujo.",
				"**Retroalimentación del Cursor:** Cambia el icono del cursor según la herramienta seleccionada (lápiz, borrador, etc.).",
				"**Interfaz Intuitiva:** Botones visuales para seleccionar herramientas y colores, facilitando su uso.",
			],
			codeHighlights: [
				"**API de Canvas 2D:** Uso extensivo de `HTMLCanvasElement.getContext('2d')` y sus métodos (`beginPath`, `moveTo`, `lineTo`, `arc`, `ellipse`, `rect`, `roundRect`, `stroke`, `fill`, `clearRect`) para dibujar dinámicamente en el lienzo.",
				"**Manejo Avanzado de Eventos de Mouse:** Implementación de `mousedown`, `mousemove`, y `mouseup` para capturar la interacción del usuario y dibujar en tiempo real, incluyendo el cálculo de posiciones y tamaños de formas.",
				"**Manipulación Dinámica del DOM:** Creación y modificación de elementos HTML (como las reglas y las guías de dibujo) en función de las interacciones del usuario y el tamaño de la ventana.",
				"**Gestión de Herramientas y Estados:** Lógica para cambiar entre herramientas de dibujo, gestionar los colores activos (línea y relleno), y actualizar el grosor del trazo/borrador.",
				"**Cálculos Geométricos:** Funciones para calcular ángulos y lados de triángulos (`CalculateAnglesOfTriangle`, `CalculateSidesOfTriangle`), útiles para dibujar líneas con rotación o triángulos precisos.",
				"**Guías de Dibujo en Tiempo Real:** Implementación de un `div` flotante (`drawingGuide`) que visualiza la forma que se está creando antes de dibujarla permanentemente en el canvas.",
			],
			futureImprovements: [
				"**Función Deshacer/Rehacer:** Añadir un historial de acciones para permitir a los usuarios revertir o rehacer cambios.",
				"**Guardar/Cargar Dibujos:** Implementar la capacidad de guardar el dibujo como una imagen (ej. PNG) y cargar dibujos existentes.",
				"**Herramienta de Selección/Mover:** Permitir seleccionar formas u objetos dibujados para moverlos, redimensionarlos o eliminarlos.",
				"**Herramienta de Texto:** Añadir la capacidad de insertar texto en el lienzo con opciones de fuente y tamaño.",
				"**Más Pinceles:** Explorar diferentes tipos de pinceles o texturas para el lápiz.",
				"**Relleno con Bote de Pintura:** Una herramienta para rellenar áreas cerradas con un color sólido.",
				"**Zoom y Panorámica:** Funcionalidad para acercar/alejar y desplazarse por el lienzo.",
				"**Capas:** Implementar un sistema básico de capas para organizar elementos del dibujo.",
				"**Paleta de Colores Personalizable:** Permitir a los usuarios guardar sus colores favoritos.",
			],
		},
	},
	{
		id: 3,
		name: "Reloj Analógico",
		description:
			"Reloj clásico de agujas animadas con diseño responsivo y actualización en tiempo real.",
		tags: [
			"clock",
			"animation",
			"real time",
			"canvas",
			"DOM Manipulation",
			"frontend",
			"UI/UX",
			"time",
			"date",
		],
		category: "component",
		difficulty: "easy",
		date: "2022-12-24",
		featured: false,
		image:
			"https://raw.githubusercontent.com/AletzMan/ImagesStorage/refs/heads/main/vanillacollection/analog-clock.webp",
		language: "javascript",
		urlRepo: "https://github.com/AletzMan/analog_clock",
		urlDemo: "https://aletzman.github.io/analog_clock/",
		projectDetails: {
			description:
				"Un **reloj analógico clásico** construido con **JavaScript (Vanilla JS)** que muestra la hora y la fecha actuales. Este proyecto combina el uso del API de Canvas para los elementos gráficos del reloj con transformaciones CSS para la animación fluida de las agujas, demostrando la sincronización en tiempo real del tiempo del sistema.",
			keyFeatures: [
				"**Visualización Analógica en Tiempo Real:** Muestra la hora exacta con agujas de hora, minuto y segundo que se actualizan cada segundo.",
				"**Diseño de Carátula Dinámico:** La carátula del reloj, incluyendo las marcas de hora y minuto, se dibuja programáticamente usando el API de Canvas 2D.",
				"**Indicador de Fecha Completo:** Muestra el día de la semana, el día del mes, el mes y el año, proporcionando información de fecha completa.",
				"**Animación Fluida de Agujas:** Las agujas se mueven de forma suave y precisa gracias a las transformaciones CSS (`rotate`).",
				"**Responsive:** La generación de la carátula se adapta al tamaño del canvas.",
			],
			codeHighlights: [
				"**API de Canvas 2D para Gráficos:** Utiliza `canvas.getContext('2d')` para dibujar las marcas de las horas y minutos del reloj, permitiendo un control preciso sobre la estética de la carátula.",
				"**`setInterval` para Actualización Continua:** Emplea un temporizador para refrescar la posición de las agujas y la fecha cada segundo, asegurando la precisión del reloj.",
				"**Transformaciones CSS para Animación:** Aplica `style.transform = 'rotate(Xdeg)'` directamente a los elementos DOM que representan las agujas, creando una animación de rotación eficiente y fluida.",
				"**Objeto `Date` para Sincronización:** Utiliza el objeto `Date` de JavaScript para obtener la hora y fecha actuales del sistema, calculando las rotaciones necesarias para cada aguja.",
				"**Manipulación Directa del DOM:** Accede y actualiza el contenido de los elementos HTML (`textContent`) para mostrar la fecha y el día de la semana.",
				"**Re-renderizado en Resize:** Adapta el dibujo de la carátula si la ventana cambia de tamaño, manteniendo la proporción y la calidad visual.",
			],
			futureImprovements: [
				"**Personalización Visual:** Añadir opciones para cambiar los colores de las agujas, el fondo del reloj o el estilo de las marcas.",
				"**Múltiples Zonas Horarias:** Permitir la adición de relojes que muestren la hora en diferentes zonas horarias.",
				"**Alarmas y Temporizadores:** Integrar funciones de alarma o un temporizador de cuenta regresiva.",
				"**Modo Nocturno/Día:** Alternar entre diferentes temas visuales según la hora del día.",
				"**Sonido de Tictac Opcional:** Añadir un efecto de sonido de tictac que se pueda activar/desactivar.",
			],
		},
	},
	{
		id: 4,
		name: "Reloj Digital",
		description:
			"Reloj digital con visualización en tiempo real, cronómetro y cuenta regresiva personalizable.",
		tags: [
			"clock",
			"timer",
			"countdown",
			"setInterval",
			"UI",
			"canvas",
			"DOM Manipulation",
			"frontend",
			"time",
		],
		category: "component",
		difficulty: "intermediate",
		date: "2022-11-30",
		featured: false,
		image:
			"https://raw.githubusercontent.com/AletzMan/ImagesStorage/refs/heads/main/vanillacollection/digital-clock.webp",
		language: "javascript",
		urlRepo: "https://github.com/AletzMan/digital-clock-vanilla",
		urlDemo: "https://aletzman.github.io/digital-clock-vanilla/",
		projectDetails: {
			description:
				"Un **reloj digital interactivo** desarrollado con **JavaScript (Vanilla JS)** que no solo muestra la hora en tiempo real, sino que también incorpora funcionalidades de **cronómetro** y **temporizador de cuenta regresiva**. Utiliza el API de Canvas 2D para renderizar los dígitos estilo 7 segmentos, ofreciendo una interfaz visualmente atractiva y personalizable.",
			keyFeatures: [
				"**Múltiples Modos:** Soporta tres modos principales: reloj digital en tiempo real, cronómetro y temporizador de cuenta regresiva.",
				"**Dígitos Personalizables:** Los dígitos se dibujan usando el API de Canvas 2D, permitiendo cambiar el color de la pantalla.",
				"**Cronómetro:** Funcionalidad de cronómetro con inicio, pausa/continuación y reinicio.",
				"**Temporizador de Cuenta Regresiva:** Permite ajustar horas, minutos y segundos, con controles para añadir/restar tiempo y un indicador visual de finalización (animación de los dígitos).",
				"**Control de Visibilidad:** Los controles de los temporizadores (botones de añadir/restar tiempo) aparecen y desaparecen dinámicamente según el modo seleccionado.",
				"**Formatos de Hora:** Los números se muestran siempre con dos dígitos (ej. '05' en lugar de '5').",
			],
			codeHighlights: [
				"**API de Canvas 2D para Segmentos:** Cada dígito del reloj está compuesto por siete segmentos individuales dibujados y controlados mediante Canvas, lo que demuestra un manejo detallado de gráficos vectoriales.",
				"**Gestión de Estados Compleja:** Utiliza variables de estado (`optionSelected`, `start`, `hoursTimer`, `minutesTimer`, `secondsTimer`, etc.) para controlar el modo del reloj (tiempo real, cronómetro, temporizador) y el comportamiento de los botones.",
				"**`setInterval` para Actualización Periódica:** Múltiples `setInterval` para gestionar la actualización del tiempo en diferentes modos (reloj, cronómetro, temporizador) de forma independiente.",
				"**Manipulación Condicional del DOM:** La visibilidad de los elementos de control y los títulos se gestiona dinámicamente (`style.visibility`) en función del modo de reloj seleccionado, mejorando la experiencia del usuario.",
				"**Lógica de Temporizador/Cronómetro:** Implementación de la lógica para el incremento/decremento de segundos, minutos y horas, incluyendo el manejo de desbordamientos (ej., 60 segundos = 1 minuto).",
				"**Animaciones CSS:** Utiliza CSS `animation` (`aumentar` en este caso) para proporcionar retroalimentación visual cuando el temporizador finaliza.",
				"**Función `addZero`:** Una función auxiliar para formatear números de un solo dígito con un cero inicial, manteniendo una visualización uniforme.",
			],
			futureImprovements: [
				"**Múltiples Temporizadores/Alarmas:** Permitir configurar y gestionar varios temporizadores o alarmas simultáneamente.",
				"**Sonidos de Alarma Personalizables:** Opción de seleccionar diferentes sonidos para la alarma del temporizador.",
				"**Funcionalidad de Lap para Cronómetro:** Añadir la capacidad de registrar tiempos intermedios (vueltas) en el cronómetro.",
				"**Persistencia de Datos:** Guardar la configuración del temporizador o los tiempos del cronómetro en el almacenamiento local del navegador.",
				"**Control por Teclado:** Permitir a los usuarios controlar el cronómetro/temporizador con atajos de teclado.",
				"**Diseño Responsivo Mejorado:** Asegurar que la interfaz se adapte perfectamente a una amplia gama de tamaños de pantalla.",
			],
		},
	},
	{
		id: 5,
		name: "Bubble Shooter Game",
		description:
			"Juego arcade de disparos donde apuntas y lanzas burbujas para alcanzar la mayor puntuación posible.",
		tags: [
			"game",
			"canvas",
			"bubble shooter",
			"color match",
			"arcade",
			"animation",
			"event handling",
			"scoring",
			"sound",
			"UI/UX",
			"frontend",
		],
		category: "game",
		difficulty: "advanced",
		date: "2023-04-04",
		featured: true,
		image:
			"https://raw.githubusercontent.com/AletzMan/ImagesStorage/refs/heads/main/vanillacollection/bubble-shooter-game.webp",
		language: "javascript",
		urlRepo: "https://github.com/AletzMan/bubble_shooter_game",
		urlDemo: "https://aletzman.github.io/bubble_shooter_game/",
		projectDetails: {
			description:
				"Un **juego de disparos arcade** dinámico e interactivo construido con **JavaScript (Vanilla JS)**. Los jugadores deben apuntar y 'disparar' a burbujas específicas (objetivos) que se mueven por la pantalla, mientras evitan que las burbujas incorrectas lleguen al área de puntuación. El juego incorpora elementos de audio, un sistema de puntuación, y animaciones para una experiencia de juego envolvente.",
			keyFeatures: [
				"**Mecánica de Disparo Interactiva:** Los jugadores hacen clic para 'disparar' proyectiles que dejan una marca visual en el lugar del impacto.",
				"**Objetivos Dinámicos:** Las 'burbujas' (representadas por cuadrados con imágenes) se mueven constantemente por la pantalla, con algunas designadas como objetivos a disparar y otras como obstáculos.",
				"**Sistema de Puntuación:** Lleva un registro de los disparos totales, aciertos (hits) y fallos (misses).",
				"**Recompensa por Aciertos Consecutivos:** Los jugadores reciben tiros adicionales por una racha de 5 aciertos.",
				"**Manejo de Juego (Game Over):** El juego termina al quedarse sin disparos o al alcanzar un límite de fallos.",
				"**Efectos de Sonido:** Incluye sonidos para los disparos y explosiones al impactar, mejorando la inmersión.",
				"**Controles de Audio:** Botón para silenciar/activar los sonidos del juego.",
				"**Interfaz de Usuario:** Muestra el tiempo transcurrido, los disparos restantes, los aciertos y los fallos en un tablero de puntuación.",
				"**Guía de Juego:** Un botón 'How to Play' que muestra/oculta una ventana con instrucciones.",
			],
			codeHighlights: [
				"**Manipulación del DOM para Elementos del Juego:** Creación dinámica de elementos (`div` con `bulletMark`) para simular los disparos y la integración de elementos HTML para el marcador y las interfaces de usuario.",
				"**Animaciones CSS Dinámicas:** Utiliza propiedades CSS como `animationName`, `animationDuration`, `animationDelay` y `transform` en combinación con `setInterval` y `requestAnimationFrame` para crear el movimiento continuo de las burbujas y efectos visuales como explosiones.",
				"**Detección de Colisiones:** Implementación de la función `checkCollision` que usa `getBoundingClientRect()` para detectar cuando las burbujas objetivo chocan con la zona de puntuación (scoreboard), incrementando los fallos.",
				"**Gestión de Eventos de Mouse:** `addEventListener('mousedown', ...)` se usa para detectar los clics del usuario, que inician el disparo y activan la lógica de impacto.",
				"**Manejo de Audio:** Uso del objeto `HTMLAudioElement` (`soundExplosion`, `soundPainballShoot`) con métodos `play()` y `muted` para controlar los efectos de sonido del juego.",
				"**Lógica de Juego y Estado:** Variables como `totalShots`, `totalhits`, `totalmisses`, `gameOver`, `startTime` controlan el flujo del juego, la puntuación y el fin de la partida.",
				"**Generación Aleatoria:** Funciones `GetRandomNumber` y `GetRandomNumberFloat` para asignar tamaños, posiciones, tiempos de animación e imágenes de fondo aleatorios a las burbujas, asegurando variabilidad en el juego.",
			],
			futureImprovements: [
				"**Múltiples Niveles de Dificultad:** Implementar diferentes niveles que ajusten la velocidad de las burbujas, el número de disparos o el límite de fallos.",
				"**Tipos de Burbujas/Poderes:** Añadir burbujas especiales que otorguen poderes (ej. ralentizar el tiempo, disparos múltiples) o diferentes valores de puntos.",
				"**Efectos Visuales Mejorados:** Incorporar más animaciones para los aciertos críticos o los game over.",
				"**Pantalla de Inicio/Fin de Juego:** Una pantalla de inicio con opciones de juego y una pantalla de fin de juego que muestre la puntuación final y un botón para reiniciar.",
				"**Almacenamiento de Puntuaciones Altas:** Guardar las mejores puntuaciones de los jugadores utilizando `localStorage`.",
				"**Optimización del Rendimiento:** Para juegos más complejos, considerar el uso de un bucle de juego más sofisticado o librerías de renderizado.",
				"**Controles Táctiles:** Adaptar la interacción para dispositivos móviles.",
			],
		},
	},
];
